name: Advanced Lead Scraper

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    # Allow manual triggering
  push:
    branches: [ main ]
    paths:
      - 'scripts/**'
      - 'lib/**'

env:
  NODE_ENV: production

jobs:
  scrape-leads:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create .env.local file
      run: |
        cat > .env.local << EOF
        GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
        SUPABASE_URL=${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        EOF
        
    - name: Check database health
      run: node scripts/test-db.js
      
    - name: Get initial lead count
      id: initial-count
      run: |
        node scripts/check-leads.js > lead-count.txt
        echo "count=$(grep 'Total leads' lead-count.txt | awk '{print $4}')" >> $GITHUB_OUTPUT
        
    - name: Run main scraper
      run: node scripts/scrape.js
      continue-on-error: true
      
    - name: Run workflow scraper
      run: node scripts/scrape-workflows.js
      continue-on-error: true
      
    - name: Run additional scraper
      run: node scripts/scrape-additional.js
      continue-on-error: true
      
    - name: Run AI automation scraper
      run: node scripts/scrape-ai-automation.js
      continue-on-error: true
      
    - name: Get final lead count
      id: final-count
      run: |
        node scripts/check-leads.js > final-lead-count.txt
        echo "count=$(grep 'Total leads' final-lead-count.txt | awk '{print $4}')" >> $GITHUB_OUTPUT
        
    - name: Calculate new leads
      id: new-leads
      run: |
        initial=${{ steps.initial-count.outputs.count }}
        final=${{ steps.final-count.outputs.count }}
        new_leads=$((final - initial))
        echo "count=$new_leads" >> $GITHUB_OUTPUT
        
    - name: Generate report
      run: |
        echo "## ðŸ“Š Scraping Report" >> report.md
        echo "" >> report.md
        echo "**Date:** $(date)" >> report.md
        echo "**Initial Leads:** ${{ steps.initial-count.outputs.count }}" >> report.md
        echo "**Final Leads:** ${{ steps.final-count.outputs.count }}" >> report.md
        echo "**New Leads Added:** ${{ steps.new-leads.outputs.count }}" >> report.md
        echo "" >> report.md
        echo "### Recent Leads:" >> report.md
        tail -10 final-lead-count.txt | grep "â€¢" >> report.md
        
    - name: Commit and push results
      if: steps.new-leads.outputs.count != '0'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "feat: automated scraping - added ${{ steps.new-leads.outputs.count }} new leads - $(date)"
        git push
        
    - name: Create issue for significant results
      if: steps.new-leads.outputs.count > 50
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('report.md', 'utf8');
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `ðŸŽ‰ Great scraping results: ${{ steps.new-leads.outputs.count }} new leads found!`,
            body: report,
            labels: ['automation', 'leads', 'success']
          });
          
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: scraping-results
        path: |
          report.md
          lead-count.txt
          final-lead-count.txt
        retention-days: 7 