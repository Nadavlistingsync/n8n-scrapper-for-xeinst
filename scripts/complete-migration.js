#!/usr/bin/env node

require('dotenv').config({ path: '.env.local' })
const fs = require('fs')
const path = require('path')

console.log('üöÄ Complete Migration: Supabase to Google Sheets')
console.log('================================================\n')

async function runMigration() {
  try {
    // Step 1: Check if we have Supabase credentials
    console.log('1Ô∏è‚É£ Checking Supabase credentials...')
    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || process.env.SUPABASE_URL
    const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    
    if (!supabaseUrl || !supabaseKey) {
      console.log('‚ö†Ô∏è  No Supabase credentials found')
      console.log('   This means you either:')
      console.log('   - Have already migrated')
      console.log('   - Are starting fresh')
      console.log('   - Need to set up Supabase credentials first')
      console.log('\n   Continuing with new system setup...\n')
    } else {
      console.log('‚úÖ Supabase credentials found')
      console.log('   Proceeding with data migration...\n')
    }
    
    // Step 2: Run migration if we have Supabase credentials
    if (supabaseUrl && supabaseKey) {
      console.log('2Ô∏è‚É£ Migrating data from Supabase...')
      try {
        const { execSync } = require('child_process')
        execSync('node scripts/migrate-supabase-to-google-sheets.js', { stdio: 'inherit' })
        console.log('‚úÖ Migration completed successfully\n')
      } catch (error) {
        console.log('‚ö†Ô∏è  Migration failed or no data found')
        console.log('   This is okay if you\'re starting fresh\n')
      }
    }
    
    // Step 3: Test the new system
    console.log('3Ô∏è‚É£ Testing Google Sheets database system...')
    try {
      const { execSync } = require('child_process')
      execSync('node scripts/test-google-sheets-db.js', { stdio: 'inherit' })
      console.log('‚úÖ System test completed successfully\n')
    } catch (error) {
      console.log('‚ùå System test failed')
      console.log('   Please check the error messages above')
      process.exit(1)
    }
    
    // Step 4: Export data to Google Sheets format
    console.log('4Ô∏è‚É£ Exporting data to Google Sheets format...')
    try {
      const { execSync } = require('child_process')
      execSync('node scripts/export-to-google-sheets-simple.js', { stdio: 'inherit' })
      console.log('‚úÖ Export completed successfully\n')
    } catch (error) {
      console.log('‚ö†Ô∏è  Export failed (might be no data yet)')
      console.log('   This is normal if you haven\'t scraped any leads yet\n')
    }
    
    // Step 5: Check data directory
    console.log('5Ô∏è‚É£ Checking data directory structure...')
    const dataDir = path.join(__dirname, '..', 'data')
    if (fs.existsSync(dataDir)) {
      const files = fs.readdirSync(dataDir)
      console.log(`‚úÖ Data directory exists with ${files.length} files`)
      
      if (files.length > 0) {
        console.log('   Files found:')
        files.forEach(file => {
          const stats = fs.statSync(path.join(dataDir, file))
          console.log(`   - ${file} (${stats.size} bytes)`)
        })
      }
    } else {
      console.log('‚úÖ Data directory will be created when needed')
    }
    
    // Step 6: Test scraping with new system
    console.log('\n6Ô∏è‚É£ Testing scraping with new system...')
    console.log('   This will create a test lead to verify everything works')
    
    try {
      // Create a simple test script
      const testScript = `
        const { insertLead, getAllLeads } = require('../lib/google-sheets-db')
        
        async function testScraping() {
          console.log('Testing scraping with new system...')
          
          const testLead = {
            github_username: 'migration-test-user',
            repo_name: 'migration-test-repo',
            repo_url: 'https://github.com/migration-test-user/migration-test-repo',
            repo_description: 'Test repository for migration verification',
            email: 'test@migration.com',
            last_activity: new Date().toISOString(),
            status: 'new',
            email_sent: false,
            email_approved: false,
            email_pending_approval: false
          }
          
          const inserted = await insertLead(testLead)
          if (inserted) {
            console.log('‚úÖ Test lead inserted successfully')
            
            const allLeads = await getAllLeads()
            console.log(\`‚úÖ Total leads in system: \${allLeads.length}\`)
            
            // Clean up test lead
            const { updateLead } = require('../lib/google-sheets-db')
            const nonTestLeads = allLeads.filter(lead => 
              !(lead.github_username === 'migration-test-user' && lead.repo_name === 'migration-test-repo')
            )
            
            // Re-save without test leads
            const { saveLeads } = require('../lib/google-sheets-db')
            await saveLeads(nonTestLeads)
            console.log('‚úÖ Test lead cleaned up')
            
          } else {
            console.log('‚ö†Ô∏è  Test lead not inserted (might be duplicate)')
          }
        }
        
        testScraping().catch(console.error)
      `
      
      const testFile = path.join(__dirname, 'temp-test.js')
      fs.writeFileSync(testFile, testScript)
      
      const { execSync } = require('child_process')
      execSync(`node ${testFile}`, { stdio: 'inherit' })
      
      // Clean up test file
      fs.unlinkSync(testFile)
      
      console.log('‚úÖ Scraping test completed successfully\n')
    } catch (error) {
      console.log('‚ùå Scraping test failed')
      console.log('   Error:', error.message)
      process.exit(1)
    }
    
    // Step 7: Final summary
    console.log('üéâ MIGRATION COMPLETED SUCCESSFULLY!')
    console.log('=====================================')
    console.log('‚úÖ Your system is now using Google Sheets as the database')
    console.log('‚úÖ All API routes have been updated')
    console.log('‚úÖ Scraping scripts have been updated')
    console.log('‚úÖ Data is stored locally in CSV files')
    console.log('‚úÖ Automatic backups are enabled')
    
    console.log('\nüìã Next Steps:')
    console.log('==============')
    console.log('1. Start scraping: node scripts/scrape.js')
    console.log('2. Export to Google Sheets: node scripts/export-to-google-sheets-simple.js')
    console.log('3. Import CSV files to Google Sheets manually')
    console.log('4. Use the web interface: npm run dev')
    
    console.log('\nüìÅ Your data is stored in:')
    console.log('   - data/leads.csv (main database)')
    console.log('   - data/backups/ (automatic backups)')
    console.log('   - data/leads-export-*.csv (Google Sheets ready)')
    
    console.log('\nüîß You can now remove Supabase environment variables from .env.local')
    console.log('   The system no longer needs:')
    console.log('   - NEXT_PUBLIC_SUPABASE_URL')
    console.log('   - SUPABASE_SERVICE_ROLE_KEY')
    console.log('   - NEXT_PUBLIC_SUPABASE_ANON_KEY')
    
    console.log('\nüìñ For more information, see: GOOGLE_SHEETS_MIGRATION_GUIDE.md')
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error)
    process.exit(1)
  }
}

// Run the complete migration
runMigration()
